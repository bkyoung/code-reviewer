name: AI Code Review

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      pull-requests: write    # Required to post PR comments

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git diff

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build code-reviewer
        run: go build -o cr ./cmd/cr

      - name: Run AI code review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          ./cr review branch ${{ github.event.pull_request.base.ref }} \
            --output ./review-output

      - name: Find review files
        id: find-files
        run: |
          # Debug: show what files were created
          echo "Contents of review-output directory:"
          ls -la review-output/ || echo "review-output directory does not exist"

          echo ""
          echo "Contents of subdirectories:"
          find review-output -type f -name "*.md" -o -name "*.sarif"

          if [ ! -d "review-output" ]; then
            echo "Error: review-output directory was not created"
            exit 1
          fi

          # Find merged markdown file (pattern: {repo}_{branch}_merged_{timestamp}.md)
          MARKDOWN_FILE=$(find review-output -maxdepth 1 -name "*_merged_*.md" | head -1)

          # Find SARIF files (could be in subdirectory or at root)
          SARIF_FILE=$(find review-output -name "*.sarif" | head -1)

          if [ -z "$MARKDOWN_FILE" ]; then
            echo "Error: Could not find merged markdown file"
            echo "Expected pattern: review-output/*_merged_*.md"
            exit 1
          fi

          if [ -z "$SARIF_FILE" ]; then
            echo "Error: Could not find SARIF file"
            echo "Expected: *.sarif somewhere in review-output/"
            exit 1
          fi

          echo "markdown_file=$MARKDOWN_FILE" >> $GITHUB_OUTPUT
          echo "sarif_file=$SARIF_FILE" >> $GITHUB_OUTPUT

          echo "Found markdown: $MARKDOWN_FILE"
          echo "Found SARIF: $SARIF_FILE"

      - name: Post review summary as PR comment
        if: always()  # Post even if review found issues
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Add header to distinguish this from human reviews
          echo "## ðŸ¤– AI Code Review" > comment.md
          echo "" >> comment.md
          echo "_Automated review by code-reviewer. [View inline annotations in Files Changed tab](${{ github.event.pull_request.html_url }}/files)_" >> comment.md
          echo "" >> comment.md
          cat ${{ steps.find-files.outputs.markdown_file }} >> comment.md

          # Post as PR comment
          gh pr comment ${{ github.event.pull_request.number }} \
            --body-file comment.md

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()  # Upload even if review found issues
        with:
          sarif_file: ${{ steps.find-files.outputs.sarif_file }}
          category: ai-code-review

      - name: Upload review artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Always upload for debugging
        with:
          name: code-review-results
          path: |
            review-output/
            comment.md
          retention-days: 30
